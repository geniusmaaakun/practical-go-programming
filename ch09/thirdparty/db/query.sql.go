// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package db

import (
	"context"
)

const createAuthor = `-- name: CreateAuthor :one
INSERT INTO author (id, name) VALUES ($1, $2) RETURNING id, name, created_at
`

type CreateAuthorParams struct {
	ID   int32
	Name string
}

func (q *Queries) CreateAuthor(ctx context.Context, arg CreateAuthorParams) (Author, error) {
	row := q.db.QueryRowContext(ctx, createAuthor, arg.ID, arg.Name)
	var i Author
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const listBookOverPrice = `-- name: ListBookOverPrice :many
SELECT
        b.title
     ,	a.name
     ,	b.price
FROM
    book b
        LEFT JOIN
    author a
    ON	1 = 1
        AND b.author_id = a.id
WHERE
    price > $1
ORDER BY
    b.title
`

type ListBookOverPriceRow struct {
	Title string
	Name  string
	Price int32
}

func (q *Queries) ListBookOverPrice(ctx context.Context, price int32) ([]ListBookOverPriceRow, error) {
	rows, err := q.db.QueryContext(ctx, listBookOverPrice, price)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListBookOverPriceRow
	for rows.Next() {
		var i ListBookOverPriceRow
		if err := rows.Scan(&i.Title, &i.Name, &i.Price); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
